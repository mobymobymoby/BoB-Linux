★리눅스 지식★
리눅스 시스템은 여러 사용자가 하나의 시스템을 사용하는 것을 전제로 만들어졌습니다.
이런 경우에 각자의 파일이 다른 사용자에 의해 변경되거나 삭제되는 것을 원하지 않을 것입니다.
그래서 고안된 것이 바로 '권한' 개념입니다.
권한은 간략하게 설명하면 '허가 받은 사람에 대해서 허가 받은 행위를 할 수 있음'입니다.
여기서 '사람'에 해당하는 것은 계정이고, '행위'에 해당하는 것은 읽기, 쓰기, 실행 동작입니다.
권한을 나타내는 방식에는 크게 2가지가 있습니다.
10자리의 문자로 나타내는 방식과, 3자리의 숫자로 나타내는 방식이 있는데, 우리가 뒤에서 배울 'ls -l' 명령어에 의해서 출력되는 것은 전자의 방식입니다.
ls -l의 명령어를 통해 나온 출력 결과가 다음과 같다고 생각해봅니다.
drwxrw-r-- kim bob
맨 앞의 'drwxrw-r--'는 권한을 나타내고, 'kim'은 소유자 이름(UID), 'bob'는 그룹 이름(GID)입니다.
여기서 10자리의 문자로 권한을 나타낸 것이 맨 앞의 'drwxrw-r--'입니다.
예를 들어 'drwxrw-r--'이라는 10자리 문자의 권한이 있다면, 크게 4부분으로 나누어 생각할 수 있습니다.
먼저 맨 앞의 'd'는 directory라는 의미입니다. 만약 해당 부분이 '-'로 되어 있다면, 그것은 '파일'이라는 것을 뜻합니다.
다음으로 나머지 9자리는 'rwx' 'rw-' 'r--'와 같이 3자리씩 끊어서 생각할 수 있습니다.
앞에서 배웠던 명령어인 'pwd'의 출력 결과가 UID와 같다면, 현재 사용자는 해당 파일의 소유자가 됩니다. 하지만 같지 않다면 '그룹' 권한이나 '전체' 권한을 적용받습니다.
자신의 그룹과 GID가 일치 한다면, 그룹 권한을 적용받게 되고, 그렇지 않다면 전체 권한을 적용받게 되는 것입니다.
만약 UID와 GID가 모두 일치한다면, UID를 우선적용 받게됩니다.
그럼 다시 위의 예시로 돌아와서, 먼저 'rwx' 부분은 '사용자(소유자,owner)' 권한입니다. 앞에서 살펴보았던 pwd로 현재 사용자를 알 수 있었습니다. 
'r'은 읽기, 'w'는 쓰기, 'x'는 실행 권한을 의미하며, 만약 'r-x'와 같이 되어 있다면 읽기와 실행 권한은 있지만, 쓰기 권한 자리가 '-'로 비워져있기 때문에 쓰기 권한은 없다는 것을 의미합니다.
다음 부분인 'rw-' 부분은 '그룹(group)' 권한 입니다. 현재 사용자가 속해있는 그룹이 해당 파일이나 디렉토리의 GID와 같다면 읽기 권한과 쓰기 권한은 있고, 실행 권한은 없음을 의미합니다.
마지막 부분인 'r--' 부분은 '전체(other)' 권한입니다. 읽기 권한만 있고 쓰기 권한이나 실행 권한이 없음을 의미합니다.
지금까지는 10자리 문자로 권한을 나타내었지만, 3자리의 숫자로 나타낼 수도 있습니다.
각 자리는 문자로 나타내는 방식과 같이 소유자, 그룹, 전체 권한으로 나뉩니다.(파일 / 디렉토리를 나타내주는 맨 앞 자리가 없어진 것이라고 생각)
읽기 권한은 숫자 '4', 쓰기 권한은 숫자 '2', 실행 권한은 숫자 '1'로 취급하고 세 권한을 더한 합을 각 자리에 표시합니다.
만약 '764'이라는 권한이 있다면, 맨 앞의 '7'은 소유자 권한 부분이며, 4+2+1이므로, 읽기, 쓰기, 실행 권한이 모두 있음을 의미합니다. 즉 문자로 표시된 'rwx' 권한과 같습니다.
다음으로 '6'은 그룹 권한 부분이며, 4+2+0이므로, 읽기 권한과 쓰기 권한은 있지만, 실행권한은 '1'이 아닌, '0'이므로 실행권한은 없습니다.
마지막으로 '4'는 전체 권한 부분이며, 4+0+0이므로 읽기 권한만 있다고 할 수 있습니다.
이러한 권한 시스템은 리눅스에서 중요한 내용이지만, 리눅스를 사용하면서 저절로 익숙해지게 되므로 억지로 외우거나 할 필요는 없습니다.

다시 mkdir -m 옵션으로 돌아와서, mkdir -m xxx의 사용법에서 'xxx'에 해당하는 것이 바로 3자리 숫자의 권한 표시 방식입니다.
즉 소유자, 그룹, 전체 권한을 숫자 형식으로 표시해주어 디렉토리를 생성할 수 있는 것입니다.
mkdir -m 명령어를 이용해 'drwxr-x-w-' 권한을 가진 디렉토리 'test_dir2'를 생성해보세요.
$ mkdir -m [권한] [생성할 디렉토리 이름]
@

-p 옵션은 하위 디렉토리를 함께 생성할 때 사용합니다.
예를 들어 mkdir 명령어를 통해 '과일'이라는 디렉토리를 생성하고, 그 안에 '사과'라는 하위 디렉토리를 생성하고 싶을 때 사용합니다.
위의 예시처럼 생성하기 위해서는 'mkdir -p 과일/사과'를 입력하면 됩니다.
mkdir -p 명령어를 이용해 'fruits' 디렉토리 안에 'apple' 디렉토리를 생성해보세요.
@
mkdir 명령어에 대한 학습이 끝났습니다. 
